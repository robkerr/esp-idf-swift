// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: session.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 Espressif Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum Espressif_SecSchemeVersion: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unsecured - plaintext communication
    case secScheme0 // = 0

    /// Security scheme 1 - Curve25519 + AES-256-CTR
    case secScheme1 // = 1
    case UNRECOGNIZED(Int)

    init() {
        self = .secScheme0
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .secScheme0
        case 1: self = .secScheme1
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .secScheme0: return 0
        case .secScheme1: return 1
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Espressif_SecSchemeVersion: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static var allCases: [Espressif_SecSchemeVersion] = [
            .secScheme0,
            .secScheme1,
        ]
    }

#endif // swift(>=4.2)

struct Espressif_SessionData {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var secVer: Espressif_SecSchemeVersion {
        get { return _storage._secVer }
        set { _uniqueStorage()._secVer = newValue }
    }

    var proto: OneOf_Proto? {
        get { return _storage._proto }
        set { _uniqueStorage()._proto = newValue }
    }

    var sec0: Espressif_Sec0Payload {
        get {
            if case let .sec0(v)? = _storage._proto { return v }
            return Espressif_Sec0Payload()
        }
        set { _uniqueStorage()._proto = .sec0(newValue) }
    }

    var sec1: Espressif_Sec1Payload {
        get {
            if case let .sec1(v)? = _storage._proto { return v }
            return Espressif_Sec1Payload()
        }
        set { _uniqueStorage()._proto = .sec1(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Proto: Equatable {
        case sec0(Espressif_Sec0Payload)
        case sec1(Espressif_Sec1Payload)

        #if !swift(>=4.1)
            static func == (lhs: Espressif_SessionData.OneOf_Proto, rhs: Espressif_SessionData.OneOf_Proto) -> Bool {
                switch (lhs, rhs) {
                case let (.sec0(l), .sec0(r)): return l == r
                case let (.sec1(l), .sec1(r)): return l == r
                default: return false
                }
            }
        #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "espressif"

extension Espressif_SecSchemeVersion: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "SecScheme0"),
        1: .same(proto: "SecScheme1"),
    ]
}

extension Espressif_SessionData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SessionData"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        2: .standard(proto: "sec_ver"),
        10: .same(proto: "sec0"),
        11: .same(proto: "sec1"),
    ]

    fileprivate class _StorageClass {
        var _secVer: Espressif_SecSchemeVersion = .secScheme0
        var _proto: Espressif_SessionData.OneOf_Proto?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _secVer = source._secVer
            _proto = source._proto
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 2: try decoder.decodeSingularEnumField(value: &_storage._secVer)
                case 10:
                    var v: Espressif_Sec0Payload?
                    if let current = _storage._proto {
                        try decoder.handleConflictingOneOf()
                        if case let .sec0(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._proto = .sec0(v) }
                case 11:
                    var v: Espressif_Sec1Payload?
                    if let current = _storage._proto {
                        try decoder.handleConflictingOneOf()
                        if case let .sec1(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._proto = .sec1(v) }
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if _storage._secVer != .secScheme0 {
                try visitor.visitSingularEnumField(value: _storage._secVer, fieldNumber: 2)
            }
            switch _storage._proto {
            case let .sec0(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            case let .sec1(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            case nil: break
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Espressif_SessionData, rhs: Espressif_SessionData) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._secVer != rhs_storage._secVer { return false }
                if _storage._proto != rhs_storage._proto { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
